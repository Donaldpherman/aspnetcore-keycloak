@page "/secure"
@attribute [Authorize]
@inject OpenIdConnectOptions oidcOptions
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor ContextAccessor
@inject IConfiguration Configuration
@*@inject ClaimsPrincipal CurrentUser*@

<h3>aspnetcore-keycloak (blazor)</h3>

Secure:

<p>
    <a href="/">home</a><br />
</p>

<AuthorizeView Roles="admin">
    <p>role:you are part of 'admin'</p>
</AuthorizeView>

<AuthorizeView Roles="role1">
    <p>role:you are part of 'role1'</p>
</AuthorizeView>

<AuthorizeView>
    <ul>
        <li>
            user: @ContextAccessor.HttpContext.User.Identity.Name
        </li>
        <li>
            isAuthenticated: @ContextAccessor.HttpContext.User.Identity.IsAuthenticated
        </li>
        <li>
            access_token: @ContextAccessor.HttpContext.GetTokenAsync("access_token").Result
        </li>
        <li>
            id_token: @ContextAccessor.HttpContext.GetTokenAsync("id_token").Result
        </li>
        <li>
            refresh_token: @ContextAccessor.HttpContext.GetTokenAsync("refresh_token").Result
        </li>
        <li>
            ====================== CLAIMS =============================================
        </li>
        @foreach (var claim in ContextAccessor.HttpContext.User.Claims.OrderBy(c => c.Type))
        {
            <li>
                @claim.Type : @claim.Value
            </li>
        }

    </ul>

    <button class="btn btn-secondary" @onclick="@(() => UpdateTokenClaims(true))">Refresh</button><br /><br />
</AuthorizeView>

<button @onclick="@Log">Write user info to console</button>

@code {
    public JObject WellKnown { get; set; }

    private async Task Log()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var user1 = ContextAccessor.HttpContext.User.Identity.Name;
            Console.WriteLine($"user '{user.Identity.Name}' is authenticated.");
        }
        else
        {
            Console.WriteLine("user is NOT authenticated.");
        }
    }

    private async Task<IIdentity> UpdateTokenClaims(bool force = false)
    {
        // always refresh the token, needs refresh token to be present in identity claims
        // or let a timer doe this constantly? https://github.com/aspnet/AspNetCore/issues/16241
        var identity = (ClaimsIdentity)this.ContextAccessor.HttpContext.User.Identity;
        var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();
        var exp = long.Parse(identity.GetClaimValue(ClaimType.AccessTokenExpires));
        Console.WriteLine($"++++++ TOKEN now: {now}, exp: {exp} ++++++++");

        if (now >= exp || force)
        {
            Console.WriteLine("++++++ TOKEN expired ++++++++");
            // tokens expired https://identitymodel.readthedocs.io/en/latest/client/token.html#requesting-a-token-using-the-refresh-token-grant-type
            var response = await new HttpClient().RequestRefreshTokenAsync(new RefreshTokenRequest
            {
                Address = (await this.GetWellKnownAsync().ConfigureAwait(false)).SelectToken("token_endpoint").Value<string>(),
                ClientId = this.oidcOptions.ClientId,
                ClientSecret = this.oidcOptions.ClientSecret,
                RefreshToken = identity.GetClaimValue(ClaimType.RefreshToken)
            });

            if (!response.IsError)
            {
                Console.WriteLine($"++++++ TOKEN refreshed {response.AccessToken} ++++++++");
                identity.SetIdentityClaims(response.AccessToken, response.RefreshToken);
            }
        }
        else
        {
            Console.WriteLine($"++++++ TOKEN expires at {exp} in {TimeSpan.FromSeconds(exp - now).Minutes} minutes ++++++++");
        }

        return identity;
    }

    private async Task<JObject> GetWellKnownAsync()
    {
        if (this.WellKnown == null)
        {
            var client = new HttpClient();
            client.BaseAddress = new Uri(this.oidcOptions.Authority + "/");
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var response = await client.GetAsync(".well-known/openid-configuration").ConfigureAwait(false);
            if (response.IsSuccessStatusCode)
            {
                var wellknownString = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                this.WellKnown = JObject.Parse(wellknownString);
            }
        }
        return this.WellKnown;
    }
}